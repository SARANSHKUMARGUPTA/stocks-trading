import { Stock } from './stock';
import { IBlackScholes } from './iblackscholes';
import { Option } from "./option";
export declare class BlackScholes implements IBlackScholes {
    stock: Stock;
    option: Option;
    riskFree: number;
    deviation: number;
    /**
     * Initialize stock with symbol
     * @param symbol
     */
    constructor(symbol: string);
    /**
     * Set option
     * @param expiryDate
     * @param strikePrice
     * @param callPut
     */
    setOption(expiryDate: Date, strikePrice: number, callPut: string): void;
    /**
     * Set risk free rate
     * @param riskFree
     */
    setRiskFree(riskFree?: number): void;
    /**
     * Set deviation
     * @param deviation
     */
    setDeviation(deviation: number): void;
    /**
     * Set stock symbol
     * @param symbol
     */
    private setStock(symbol);
    /**
     * First partial derivative of stock price
     * (velocity)
     */
    delta(): number | null;
    /**
     * Second partial derivative of Stock price movement
     * (acceleration)
     */
    gamma(): number | null;
    /**
     * First partial derivative of time to maturity
     * (time decay)
     * Theta of value -10 means the option is losing $10 in time value each day.
     */
    theta(): number | null;
    /**
     * First partial derivative of risk-free rate
     * How much a change in 1% of interest rates impacts the option's price
     */
    rho(): number | null;
    /**
     * First partial derivative of deviation (volatility)
     * How much a change in 1% of the underlying assets impacts the option's price
     */
    vega(): number | null;
    value(): number | null;
    readonly d1: number | null;
    readonly d2: number | null;
    readonly normPDFD1: number | null;
    /**
     * Gets the closest maturing Treasury Bill for option's expiry date
     * I access this data via Quandl
     */
    getRiskRate(): Promise<any>;
    /**
     * Get the last official price from IEX API
     */
    getCurrentPrice(symbol: string): Promise<number>;
}
