"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
//const request = require('supertest');
const moment = require('moment');
const stock_1 = require("./stock");
const optiontype_1 = require("./optiontype");
const option_1 = require("./option");
const normaldist_1 = require("./normaldist");
const config_1 = require("./config");
class BlackScholes {
    /**
     * Initialize stock with symbol
     * @param symbol
     */
    constructor(symbol) {
        // Set stock values
        this.setStock(symbol);
    }
    /**
     * Set option
     * @param expiryDate
     * @param strikePrice
     * @param callPut
     */
    setOption(expiryDate, strikePrice, callPut) {
        this.option = new option_1.Option();
        this.option.expiryDate = expiryDate;
        this.option.strikePrice = strikePrice;
        this.option.type = callPut.toLocaleLowerCase() === 'call' ?
            optiontype_1.OptionType.Call :
            optiontype_1.OptionType.Put;
    }
    /**
     * Set risk free rate
     * @param riskFree
     */
    setRiskFree(riskFree) {
        if (riskFree === null || riskFree === undefined) {
            this.getRiskRate()
                .then(riskRate => this.riskFree = riskRate);
        }
        else {
            this.riskFree = riskFree;
        }
    }
    /**
     * Set deviation
     * @param deviation
     */
    setDeviation(deviation) {
        this.deviation = deviation;
    }
    /**
     * Set stock symbol
     * @param symbol
     */
    setStock(symbol) {
        this.stock = new stock_1.Stock();
        this.stock.symbol = symbol;
        this.stock.price = 75;
       // this.getCurrentPrice(symbol)
        //    .then(price => this.stock.price = price);
    }
    /**
     * First partial derivative of stock price
     * (velocity)
     */
    delta() {
        if (this.d1 === null) {
            return null;
        }
        const delta = normaldist_1.NormalDist.cdf(this.d1);
        return _toFixed(delta, 3);
    }
    /**
     * Second partial derivative of Stock price movement
     * (acceleration)
     */
    gamma() {
        if (this.normPDFD1 === null) {
            return null;
        }
        const gamma = normaldist_1.NormalDist.pdf(this.normPDFD1) /
            (this.stock.price *
                this.deviation *
                Math.sqrt(this.option.getTimeToExpiry()));
        return _toFixed(gamma, 3);
    }
    /**
     * First partial derivative of time to maturity
     * (time decay)
     * Theta of value -10 means the option is losing $10 in time value each day.
     */
    theta() {
        if (this.d2 === null) {
            return null;
        }
        if (this.d1 === null) {
            return null;
        }
        if (this.normPDFD1 === null) {
            return null;
        }
        const sign = this.option.type === optiontype_1.OptionType.Call ?
            1 :
            -1;
        const theta = (-1 *
            this.stock.price *
            normaldist_1.NormalDist.cdf(this.d1) *
            this.deviation /
            (2 *
                Math.sqrt(this.option.getTimeToExpiry()))) -
            (sign *
                this.riskFree *
                this.option.strikePrice *
                Math.exp(-1 * this.riskFree * this.option.getTimeToExpiry()) *
                normaldist_1.NormalDist.pdf(sign * this.d2));
        return _toFixed(theta, 3);
    }
    /**
     * First partial derivative of risk-free rate
     * How much a change in 1% of interest rates impacts the option's price
     */
    rho() {
        if (this.d2 === null) {
            return null;
        }
        const sign = this.option.type === optiontype_1.OptionType.Call ?
            1 :
            -1;
        const expiryTime = this.option.getTimeToExpiry();
        const rho = sign *
            this.option.strikePrice *
            expiryTime *
            Math.exp(-1 * this.riskFree * expiryTime) *
            normaldist_1.NormalDist.cdf(sign * this.d2);
        return _toFixed(rho, 3);
    }
    /**
     * First partial derivative of deviation (volatility)
     * How much a change in 1% of the underlying assets impacts the option's price
     */
    vega() {
        if (this.d1 === null) {
            return null;
        }
        if (this.d2 === null) {
            return null;
        }
        const expiryTime = this.option.getTimeToExpiry();
        const vega = this.stock.price *
            Math.sqrt(this.option.getTimeToExpiry()) *
            normaldist_1.NormalDist.pdf(this.d1);
        return _toFixed(vega, 3);
    }
    value() {
        if (this.d1 === null) {
            return null;
        }
        if (this.d2 === null) {
            return null;
        }
        // One day
        const minTimeToExpire = 1 / 365;
        const sign = this.option.type === optiontype_1.OptionType.Call ?
            1 :
            -1;
        if (this.option.getTimeToExpiry() < minTimeToExpire) {
            return Math.max(sign * (this.stock.price - this.option.strikePrice), 0);
        }
        const priceNorm = this.stock.price * normaldist_1.NormalDist.cdf(sign * this.d1);
        const strikeRisk = this.option.strikePrice * Math.exp(-1 * this.riskFree * this.option.getTimeToExpiry()) * normaldist_1.NormalDist.cdf(sign * this.d2);
        if (this.option.type === optiontype_1.OptionType.Call) {
            return priceNorm - strikeRisk;
        }
        else {
            return strikeRisk - priceNorm;
        }
    }
    get d1() {
        const timeToExpiry = this.option.getTimeToExpiry();
        if (timeToExpiry < 0) {
            return null;
        }
        return (Math.log(this.stock.price / this.option.strikePrice) +
            (this.riskFree +
                Math.pow(this.deviation, 2) / 2) *
                timeToExpiry) /
            (this.deviation * Math.sqrt(timeToExpiry));
    }
    get d2() {
        const d1 = this.d1;
        if (d1 === null) {
            return null;
        }
        return d1 - (this.deviation * Math.sqrt(this.option.getTimeToExpiry()));
    }
    get normPDFD1() {
        if (this.d1 === null) {
            return null;
        }
        return normaldist_1.NormalDist.pdf(this.d1);
    }
    
   
}
exports.BlackScholes = BlackScholes;
function _toFixed(x, numDigits) {
    const powerOfTen = Math.pow(10, numDigits);
    const roundedToNearestNth = Math.round(x * powerOfTen) / powerOfTen;
    return parseFloat(roundedToNearestNth.toFixed(numDigits));
}
function isUndefinedOrNull(obj) {
    return obj === undefined || obj === null;
}