import * as tslib_1 from "tslib";
import { test } from 'ava';
import { Stock, BlackScholes, Option, OptionType } from 'black-scholes-js';
let blackScholes;
let stock;
let option;
test.beforeEach('construct black scholes', t => {
    stock = new Stock();
    stock.symbol = 'fb';
    stock.price = 172.16;
    option = new Option();
    option.expiryDate = new Date('2017-07-24');
    option.underlyingAsset = stock;
    option.strikePrice = 100;
    option.type = OptionType.Call;
    blackScholes = new BlackScholes('fb');
    blackScholes.setDeviation(.1);
    blackScholes.setRiskFree(.06);
    blackScholes.setOption(option.expiryDate, option.strikePrice, option.type);
});
test('construct', t => {
    t.deepEqual(option.type, blackScholes.option.type);
    t.deepEqual(stock.symbol, blackScholes.stock.symbol);
});
test('delta', t => {
    const delta = blackScholes.delta();
    t.true(delta >= .300 && delta <= .600);
});
test('gamma', t => {
    const gamma = blackScholes.gamma();
    t.true(gamma >= .100 && gamma <= .150);
});
test('vega', t => {
    const vega = blackScholes.vega();
    t.true(vega >= 11.000 && vega <= 12.000);
});
test('rho', t => {
    const rho = blackScholes.rho();
    t.true(rho >= 4.00 && rho <= 5.00);
});
test('theta', t => {
    const theta = blackScholes.theta();
    t.true(theta >= -13 && theta <= -12.000);
});
test('value', t => {
    const value = blackScholes.value();
    t.true(value >= 1.3 && value <= 1.4);
});
test('get current price', (t) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    const data = yield blackScholes.getCurrentPrice('fb');
    t.true(typeof data === 'number');
}));
// Uncomment if key is present
// test('risk rate', async t => {
//   const data = await blackScholes.getRiskRate();
//   t.true(typeof data === 'number');
// }); 
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmxhY2tzY2hvbGVzLnNwZWMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvbGliL2JsYWNrc2Nob2xlcy5zcGVjLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQ0wsSUFBSSxFQUNMLE1BQU0sS0FBSyxDQUFDO0FBQ2IsT0FBTyxFQUNMLEtBQUssRUFDTCxZQUFZLEVBQ1osTUFBTSxFQUNOLFVBQVUsRUFDWCxNQUFNLGtCQUFrQixDQUFDO0FBRTFCLElBQUksWUFBWSxDQUFDO0FBQ2pCLElBQUksS0FBSyxDQUFDO0FBQ1YsSUFBSSxNQUFNLENBQUM7QUFFWCxJQUFJLENBQUMsVUFBVSxDQUFDLHlCQUF5QixFQUFFLENBQUM7SUFDMUMsS0FBSyxHQUFHLElBQUksS0FBSyxFQUFFLENBQUM7SUFDcEIsS0FBSyxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUM7SUFDcEIsS0FBSyxDQUFDLEtBQUssR0FBRyxNQUFNLENBQUM7SUFFckIsTUFBTSxHQUFHLElBQUksTUFBTSxFQUFFLENBQUM7SUFDdEIsTUFBTSxDQUFDLFVBQVUsR0FBRyxJQUFJLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQztJQUMzQyxNQUFNLENBQUMsZUFBZSxHQUFHLEtBQUssQ0FBQztJQUMvQixNQUFNLENBQUMsV0FBVyxHQUFHLEdBQUcsQ0FBQztJQUN6QixNQUFNLENBQUMsSUFBSSxHQUFHLFVBQVUsQ0FBQyxJQUFJLENBQUM7SUFFOUIsWUFBWSxHQUFHLElBQUksWUFBWSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3RDLFlBQVksQ0FBQyxZQUFZLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDOUIsWUFBWSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUM5QixZQUFZLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxVQUFVLEVBQUUsTUFBTSxDQUFDLFdBQVcsRUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDN0UsQ0FBQyxDQUFDLENBQUM7QUFFSCxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDakIsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLFlBQVksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDbkQsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFLFlBQVksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDdkQsQ0FBQyxDQUFDLENBQUM7QUFFSCxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUM7SUFDYixNQUFNLEtBQUssR0FBRyxZQUFZLENBQUMsS0FBSyxFQUFFLENBQUM7SUFDbkMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLElBQUksSUFBSSxJQUFJLEtBQUssSUFBSSxJQUFJLENBQUMsQ0FBQztBQUN6QyxDQUFDLENBQUMsQ0FBQztBQUVILElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQztJQUNiLE1BQU0sS0FBSyxHQUFHLFlBQVksQ0FBQyxLQUFLLEVBQUUsQ0FBQztJQUNuQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssSUFBSSxJQUFJLElBQUksS0FBSyxJQUFJLElBQUksQ0FBQyxDQUFDO0FBQ3pDLENBQUMsQ0FBQyxDQUFDO0FBRUgsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDO0lBQ1osTUFBTSxJQUFJLEdBQUcsWUFBWSxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ2pDLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxJQUFJLE1BQU0sSUFBSSxJQUFJLElBQUksTUFBTSxDQUFDLENBQUM7QUFDM0MsQ0FBQyxDQUFDLENBQUM7QUFFSCxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7SUFDWCxNQUFNLEdBQUcsR0FBRyxZQUFZLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDL0IsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLElBQUksSUFBSSxJQUFJLEdBQUcsSUFBSSxJQUFJLENBQUMsQ0FBQztBQUNyQyxDQUFDLENBQUMsQ0FBQztBQUVILElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQztJQUNiLE1BQU0sS0FBSyxHQUFHLFlBQVksQ0FBQyxLQUFLLEVBQUUsQ0FBQztJQUNuQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssSUFBSSxDQUFDLEVBQUUsSUFBSSxLQUFLLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUMzQyxDQUFDLENBQUMsQ0FBQztBQUVILElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQztJQUNiLE1BQU0sS0FBSyxHQUFHLFlBQVksQ0FBQyxLQUFLLEVBQUUsQ0FBQztJQUNuQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssSUFBSSxHQUFHLElBQUksS0FBSyxJQUFJLEdBQUcsQ0FBQyxDQUFDO0FBQ3ZDLENBQUMsQ0FBQyxDQUFDO0FBRUgsSUFBSSxDQUFDLG1CQUFtQixFQUFFLENBQU0sQ0FBQztJQUMvQixNQUFNLElBQUksR0FBRyxNQUFNLFlBQVksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDdEQsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLElBQUksS0FBSyxRQUFRLENBQUMsQ0FBQztBQUNuQyxDQUFDLENBQUEsQ0FBQyxDQUFDO0FBRUgsOEJBQThCO0FBQzlCLGlDQUFpQztBQUNqQyxtREFBbUQ7QUFDbkQsc0NBQXNDO0FBQ3RDLE1BQU0ifQ==